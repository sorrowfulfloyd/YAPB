require('dotenv').config({ path: '.env' });
const express = require('express');
const mongoose = require('mongoose');

const { Book } = require('./models/model');

const MONGO_URI = process.env.DB_ADRESS;
const PORT = process.env.PORT || 5500;

const app = express();

app.use(express.json());

// Post books to DB
app.post('/books', async (req, res) => {
  try {
    if (Object.keys(req.body).length == 0) {
      console.log(`Birisi boÅŸ 'body' ile POST isteÄŸi atmaya Ã§alÄ±ÅŸtÄ± ÅŸuraya -> '${req.path}'`);
      return res.status(400).json({
        message: `BoÅŸ 'body' ile POST isteÄŸi atamazsÄ±nÄ±z!`,
        "Ã¶rnek istek - 'data tÃ¼rÃ¼ne dikkat edin!'": exampleRequest
      });
    };
    const newBook = new Book({ ...req.body });
    const book = await newBook.save();
    console.log(`Yeni bir kitap baÅŸarÄ±yla veritabanÄ±nda oluÅŸturuldu!\n %j`, book);
    return res.status(201).json({
      Status: '201 - OluÅŸturuldu',
      message: 'GÃ¶nderdiÄŸiniz obje ile veritabanÄ±nda yeni bir kitap baÅŸarÄ±yla oluÅŸturuldu.',
      "OluÅŸturulan Objeniz": book
    });
  } catch (error) {

    if (error.name == 'ValidationError') { // kullanÄ±cÄ± POST isteÄŸi atarken bir yerleri boÅŸ bÄ±rakÄ±rsa...
      let returnMsg = {};
      Object.keys(error.errors).forEach((key) => {
        returnMsg[key] = `<- YanlÄ±ÅŸ veya eksik deÄŸer.`;
      });

      returnMsg['Ã–rnek POST isteÄŸi - "data tÃ¼rÃ¼ne dikkat edin!"'] = exampleRequest;

      return res.status(400).json(returnMsg);
    }
    console.log(`Bir kitabÄ± veritabanÄ±na kaydederken bir sorun oluÅŸtu.\n ${error}\n`)
    return res.status(400).json({ Status: `${req.path} adresine POST isteÄŸi atÄ±lÄ±rken bir hata oluÅŸtu!`, 'hata mesajÄ±': error.message, type: error })
  };
});

// GET all book from DB
app.get('/books', async (req, res) => {
  try {
    const allBooks = await Book.find();
    return res.status(200).json({ 'BÃ¼tÃ¼n kitaplarÄ±n sayÄ±sÄ±': allBooks.length, 'Kitaplar': allBooks })
  } catch (error) {
    return res.status(500).json({ Status: 'VeritabanÄ±ndaki bÃ¼tÃ¼n kitaplarÄ± derlerken bir sorun oluÅŸtu!', 'Hata mesajÄ±': error.message })
  }
});

// GET one book from DB
app.get('/books/:id', async (req, res) => {
  try {
    if (!mongoose.isValidObjectId(req.params.id)) {
      return res.status(400).json({
        'HATA': 'GÃ¶nderilen id geÃ§erli deÄŸil!',
        'id': req.params.id
      })
    }
    const singleBookObj = await Book.findById(req.params.id);

    // eÄŸer verilen id geÃ§erli ise, fakat veritabanÄ±nda bÃ¶yle bir obje bulunamÄ±yorsa findById() fonksiyonu 'null' dÃ¶nÃ¼yor.
    // bunun iÃ§in aÅŸaÄŸÄ±da ufak bir kontrolle doÄŸru cevabÄ± gÃ¶nderebiliriz. 
    return singleBookObj ?
      res.status(200).json({
        'Ä°stediÄŸiniz obje bulundu!': { 'Kitap': singleBookObj }
      })
      : res.status(404).json({ 'Hata': 'Verilen id ile veritabanÄ±nda bir obje bulunamadÄ±', 'id': req.params.id });
  } catch (error) {
    return res.status(500).json({ Status: 'VeritabanÄ±ndan bir adet kitap isterken bir sorun oluÅŸtu!', 'Hata mesajÄ±': error.message })
  }
})

exampleRequest = {
  "title": "Kitap adÄ± - string",
  "desc": "KitabÄ±n aÃ§Ä±klamasÄ± - string",
  "author": "Yazar - string",
  "publishYear": 2010
}

const startServer = async () => {
  try {
    await mongoose.connect(MONGO_URI)
      .then(() => console.log('[DB] - VeritabanÄ±na baÄŸlanÄ±ldÄ±.'))
      .catch((err) => { console.log(`[ERROR] VeritabanÄ±na baÄŸlanamadÄ±m :/`); throw err });

    app.listen(PORT, () => {
      console.log(`Bi' dakika ÅŸef, ateÅŸliyorum... ğŸ”¥ğŸ”¥ğŸ”¥\nTamamdÄ±r, iÃ§erdeyiz. Port: ${PORT}`)

    });

  } catch (error) {
    console.log(`[ERROR] While starting the server, check your credentials and try again. Aborting.\n${error}`);
    process.exit(1);
  };
};

startServer();